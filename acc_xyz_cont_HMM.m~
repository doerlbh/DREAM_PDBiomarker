% stage characterization with HMM
% Baihan Lin
% Columbia University
% July 2017

clear all; close all;

% path = '/gscratch/stf/sunnylin/Columbia/DREAM_PDBiomarker/';
% path = '/home/sunnylin/Dropbox/Git/DREAM_PDBiomarker/';
path = '/Users/DoerLBH/Dropbox/git/DREAM_PDBiomarker/';

pathTestData = [path 'test_outbound'];
% pathN = path;

% loc = 'Hyak';
% loc = 'Hyakqsub';
% loc = 'americano';
% loc ='galao';
% loc = 'latte';
% loc = 'espresso';
% loc = 'mocha';
loc = 'doerlbh';

addpath(path);
addpath([path 'jsonlab-master']);
addpath(pathTestData)
% addpath([path 'parameters']);
% addpath([path 'embeddings']);

test_file = 'test_walk_outbound.tmp';

rawData = loadjson(test_file,'SimplifyCell',1);
size = length(rawData);
time = zeros(1,size);
acc = zeros(3,size);

for t = 1:size
    time(1,t) = rawData(1,t).timestamp;
    acc(1,t) = rawData(1,t).x;
    acc(2,t) = rawData(1,t).y;
    acc(3,t) = rawData(1,t).z;
end

% acc = acc.';
% time = time.';

fig1 = figure(1);
plot(time, acc);

% data = acc.';
data = acc;

[sections, data] = sliceStep(data, 20);
steps = length(data);

%% train HMM

setSeed(0);
maxIt = 30;
nRndRest = 10;

nstates = 4;
d = 3;

% % only choose x and y
% data = data(1:2,:);
% d = 2;

% test with a bogus prior
if 1
    prior.mu = ones(1, d);
    prior.Sigma = 0.1*eye(d);
    prior.k = d;
    prior.dof = prior.k + 1;
end

model = hmmFitEm(data, nstates, 'gauss', 'verbose', true, 'piPrior', ones(1,nstates), ...
    'emissionPrior', prior, 'nRandomRestarts', nRndRest, 'maxIter', maxIt);

T = sections;
stptime = zeros(1,T);
timeObs = zeros(1,T);

[observed, hidden] = hmmSample(model, T, 1);
% figure;


%% plot clustering

fig2 = figure(2); hold on
title(['stage characterizations of walking outbound acc']);
[styles, colors, symbols, str] =  plotColors();

% for t = 1 : T - 1
%    ndx=hidden(t);
%    rate = model.pi(ndx);
%    tau = log(1/rand()) / rate;
%    stptime(t+1) = tau;
%    timeObs(t+1) = timeObs(t) + tau;
% end

for k=1:nstates
    gaussPlot2d(model.emission.mu(1:2,k), model.emission.Sigma(1:2,1:2,k),...
        'color',colors(k),'plotMarker','false');
    xlabel('x');
    ylabel('y');
    %   ndx=(hidden==k);
    %   plot(observed(1,ndx), observed(2,ndx), sprintf('%s%s', colors(k), symbols(k)));
end


for t=1:T-1
    ndx=hidden(t);
    text(observed(1,t), observed(2,t), sprintf('%d', t), ...
        'color', colors(ndx), 'fontsize', 14);
    
    plot(observed(1,t:t+1),observed(2,t:t+1),'k-','linewidth',1);
    %  pause(0.1)
end

% plot(observed(1,:),observed(2,:),'k-','linewidth',1);

%% plot hidden states

% figure;
fig3 = figure(3); hold on
title(['hidden states']);
xlabel('t-sample');
ylabel('hidden states');
for k=1:nstates
    ndx=find(hidden==k);
    plot(ndx, hidden(ndx), 'o', 'color', colors(k));
end
axis_pct

%% plot x y z observed

% figure;
fig4 = figure(4);
title(['sampled observed x and y']);
xlabel('t-sample');
ylabel('hidden states');
hold on
plot(timeObs, observed(1,:));
plot(timeObs, observed(2,:));
plot(timeObs, observed(3,:));
legend('x','y','z');

%% Comparing observed with original datasets

% figure;
% hold on

for s = 1: steps
    
    figS = figure(3+s);
    title(['observed vs original datasets']);
   
    data_sec = data{s};
    
    subplot(3,1,1);
    plot(time(1:T), observed(1,:)); hold on
    plot(time(1:T), data_sec(1,1:T));
    legend('obs_x','data_x');
    xlabel('t');
    
    subplot(3,1,2);
    plot(time(1:T), observed(2,:)); hold on
    plot(time(1:T), data_sec(2,1:T));
    legend('obs_y','data_y');
    xlabel('t');
    
    subplot(3,1,3);
    plot(time(1:T), observed(3,:)); hold on
    plot(time(1:T), data_sec(3,1:T));
    legend('obs_z','data_z');
    xlabel('t');
   
end



